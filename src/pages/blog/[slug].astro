---
import CTAButtons from "../../components/CTAButtons.astro";
import SiteLayout from "../../layouts/BaseLayout.astro";

import Author from "../../images/mathew_goldsborough_headshot.jpeg";

export async function getStaticPaths() {
  const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;
  const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
  const response = await fetch(
    `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams({
      apiKey: builderAPIpublicKey,
      fields: ["data.slug", "data.title", "data.category", "data.snippet", "data.headerImage"].join(
        ","
      ),
      cachebust: "true",
    }).toString()}`
  )
    .then((res) => res.json())
    .catch();

  const posts: Post[] = response.results || [];

  if (!Array.isArray(posts)) {
    console.error("Expected posts to be an array, but got:", posts);
    return [];
  }

  return posts.map(({ data: { slug, title, headerImage, snippet } }) => ({
    params: { slug },
    props: { title, headerImage, snippet },
  }));
}

const { slug } = Astro.params;
const { title, headerImage, snippet } = Astro.props;

const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;
const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;

// Builder's API requires this field but for this use case the url doesn't seem to matter - the API returns the same HTML
const encodedUrl = encodeURIComponent("moot");
const { html: postHTML } = await fetch(
  `https://cdn.builder.io/api/v1/qwik/${builderModel}?${new URLSearchParams({
    apiKey: builderAPIpublicKey,
    url: encodedUrl,
    "query.data.slug": slug,
    cachebust: "true",
  }).toString()}`
)
  .then((res) => res.json())
  .catch();
---

<style>
  .header-container {
    position: relative;
    width: 100%;
    height: 500px;
    overflow: hidden;
    padding-top: 50px;
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
  }

  .text-center {
    position: relative;
    z-index: 1;
  }

  .author-container {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 10px;
  }

  .author-image {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-top: 10px;
  }

  .author-name {
    color: white;
    font-size: 1rem;
    display: flex;
    align-items: center;
    height: 50px;
    padding-left: 10px;
  }
</style>

<SiteLayout title={title} description={snippet} image={headerImage}>
  <div class="header-container" style={{ backgroundImage: `url(${headerImage})` }}>
    <div class="container">
      <div class="row">
        <div class="col">
          <div class="overlay"></div>

          <div class="text-center text-white">
            <h1 class="glow-black my-5">{title}</h1>
            <div class="author-container">
              <img src={Author.src} class="author-image" alt="Mathew Goldsborough" />
              <span class="author-name">by Mathew Goldsborough</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="container">
    <article>
      <Fragment set:html={postHTML} />
    </article>
  </div>
  <section class="ts-banner">
    <div class="container">
      <div class="row py-5 text-center">
        <div class="col">
          <h1 class="py-5">
            Get started <span class="glow">in minutes</span>
          </h1>
          <CTAButtons isDark="true" />
        </div>
      </div>
    </div>
  </section>
</SiteLayout>
